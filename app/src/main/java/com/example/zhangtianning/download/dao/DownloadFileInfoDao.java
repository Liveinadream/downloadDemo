package com.example.zhangtianning.download.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.example.zhangtianning.download.dao.DownloadFileInfo;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table DOWNLOAD_FILE_INFO.
*/
public class DownloadFileInfoDao extends AbstractDao<DownloadFileInfo, Long> {

    public static final String TABLENAME = "DOWNLOAD_FILE_INFO";

    /**
     * Properties of entity DownloadFileInfo.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property FileSize = new Property(1, Long.class, "fileSize", false, "FILE_SIZE");
        public final static Property FilePath = new Property(2, String.class, "filePath", false, "FILE_PATH");
        public final static Property FileName = new Property(3, String.class, "fileName", false, "FILE_NAME");
        public final static Property TempFilePath = new Property(4, String.class, "tempFilePath", false, "TEMP_FILE_PATH");
        public final static Property DownloadUrl = new Property(5, String.class, "downloadUrl", false, "DOWNLOAD_URL");
        public final static Property HadDownloadSize = new Property(6, Long.class, "hadDownloadSize", false, "HAD_DOWNLOAD_SIZE");
        public final static Property DownloadProgress = new Property(7, Integer.class, "downloadProgress", false, "DOWNLOAD_PROGRESS");
        public final static Property Version = new Property(8, Integer.class, "version", false, "VERSION");
    };


    public DownloadFileInfoDao(DaoConfig config) {
        super(config);
    }
    
    public DownloadFileInfoDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'DOWNLOAD_FILE_INFO' (" + //
                "'_id' INTEGER PRIMARY KEY ," + // 0: id
                "'FILE_SIZE' INTEGER," + // 1: fileSize
                "'FILE_PATH' TEXT," + // 2: filePath
                "'FILE_NAME' TEXT," + // 3: fileName
                "'TEMP_FILE_PATH' TEXT," + // 4: tempFilePath
                "'DOWNLOAD_URL' TEXT," + // 5: downloadUrl
                "'HAD_DOWNLOAD_SIZE' INTEGER," + // 6: hadDownloadSize
                "'DOWNLOAD_PROGRESS' INTEGER," + // 7: downloadProgress
                "'VERSION' INTEGER);"); // 8: version
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'DOWNLOAD_FILE_INFO'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, DownloadFileInfo entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Long fileSize = entity.getFileSize();
        if (fileSize != null) {
            stmt.bindLong(2, fileSize);
        }
 
        String filePath = entity.getFilePath();
        if (filePath != null) {
            stmt.bindString(3, filePath);
        }
 
        String fileName = entity.getFileName();
        if (fileName != null) {
            stmt.bindString(4, fileName);
        }
 
        String tempFilePath = entity.getTempFilePath();
        if (tempFilePath != null) {
            stmt.bindString(5, tempFilePath);
        }
 
        String downloadUrl = entity.getDownloadUrl();
        if (downloadUrl != null) {
            stmt.bindString(6, downloadUrl);
        }
 
        Long hadDownloadSize = entity.getHadDownloadSize();
        if (hadDownloadSize != null) {
            stmt.bindLong(7, hadDownloadSize);
        }
 
        Integer downloadProgress = entity.getDownloadProgress();
        if (downloadProgress != null) {
            stmt.bindLong(8, downloadProgress);
        }
 
        Integer version = entity.getVersion();
        if (version != null) {
            stmt.bindLong(9, version);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public DownloadFileInfo readEntity(Cursor cursor, int offset) {
        DownloadFileInfo entity = new DownloadFileInfo( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1), // fileSize
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // filePath
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // fileName
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // tempFilePath
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // downloadUrl
            cursor.isNull(offset + 6) ? null : cursor.getLong(offset + 6), // hadDownloadSize
            cursor.isNull(offset + 7) ? null : cursor.getInt(offset + 7), // downloadProgress
            cursor.isNull(offset + 8) ? null : cursor.getInt(offset + 8) // version
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, DownloadFileInfo entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setFileSize(cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1));
        entity.setFilePath(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setFileName(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setTempFilePath(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setDownloadUrl(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setHadDownloadSize(cursor.isNull(offset + 6) ? null : cursor.getLong(offset + 6));
        entity.setDownloadProgress(cursor.isNull(offset + 7) ? null : cursor.getInt(offset + 7));
        entity.setVersion(cursor.isNull(offset + 8) ? null : cursor.getInt(offset + 8));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(DownloadFileInfo entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(DownloadFileInfo entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
